{"ast":null,"code":"var _jsxFileName = \"/Users/sasha/Downloads/Hunter/Spring25/WebDev/03/bank-of-react/src/components/Background.js\";\nimport React from 'react';\nimport './style.css';\n// This component creates a mountain background with a gradient sky and stars\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MountainBackground = /*#__PURE__*/React.memo(_c = () => {\n  // Mountain layers data\n  const mountains = [{\n    color: \"#4d1428\",\n    points: generateMountainPoints(0.85, 0.9, 6)\n  },\n  // Darkest, back layer\n  {\n    color: \"#672e51\",\n    points: generateMountainPoints(0.75, 0.85, 7)\n  },\n  // Dark layer\n  {\n    color: \"#ec5558\",\n    points: generateMountainPoints(0.65, 0.8, 8)\n  },\n  // Red layer\n  {\n    color: \"#fe9481\",\n    points: generateMountainPoints(0.55, 0.75, 10)\n  },\n  // Salmon layer\n  {\n    color: \"#fec493\",\n    points: generateMountainPoints(0.45, 0.7, 12)\n  } // Coral, front layer\n  ];\n\n  // Function to generate a mountain silhouette\n  function generateMountainPoints(minHeight, maxHeight, peakCount) {\n    const points = [];\n\n    // Start from the bottom left\n    points.push({\n      x: 0,\n      y: 1\n    });\n\n    // Create mountain peaks\n    const segmentWidth = 1 / (peakCount - 1);\n    for (let i = 0; i < peakCount; i++) {\n      const x = i * segmentWidth;\n      // Randomize the height within the given range\n      const heightVariation = maxHeight - minHeight;\n      const y = minHeight + Math.random() * heightVariation;\n      points.push({\n        x,\n        y\n      });\n\n      // Add some small bumps between major peaks\n      if (i < peakCount - 1) {\n        const smallBumps = Math.floor(Math.random() * 2) + 1;\n        for (let j = 0; j < smallBumps; j++) {\n          const bumpX = x + segmentWidth * (j + 1) / (smallBumps + 1);\n          const bumpHeight = y + Math.random() * 0.05 - 0.03;\n          points.push({\n            x: bumpX,\n            y: bumpHeight\n          });\n        }\n      }\n    }\n\n    // End at the bottom right\n    points.push({\n      x: 1,\n      y: 1\n    });\n\n    // Sort points by x to ensure proper drawing\n    points.sort((a, b) => a.x - b.x);\n    return points.map(p => `${p.x * 1000},${p.y * 600}`).join(' ');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mountain-background\",\n    style: {\n      position: 'absolute'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full absolute inset-0 -z-10 overflow-hidden bg-gradient-to-b from-pink-900 to-red-900\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 1000 600\",\n        className: \"w-full h-full\",\n        preserveAspectRatio: \"xMidYMid slice\",\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n            id: \"skyGradient\",\n            x1: \"0%\",\n            y1: \"0%\",\n            x2: \"0%\",\n            y2: \"100%\",\n            children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n              offset: \"0%\",\n              stopColor: \"#4d1428\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n              offset: \"100%\",\n              stopColor: \"#672e51\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"0\",\n          y: \"0\",\n          width: \"1000\",\n          height: \"600\",\n          fill: \"url(#skyGradient)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), Array.from({\n          length: 100\n        }).map((_, i) => {\n          const x = Math.random() * 1000;\n          const y = Math.random() * 350;\n          const size = Math.random() * 2 + 0.5;\n          const opacity = Math.random() * 0.7 + 0.3;\n          return /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: x,\n            cy: y,\n            r: size,\n            fill: \"#fec493\",\n            opacity: opacity\n          }, `star-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this);\n        }), mountains.map((mountain, index) => /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: mountain.points,\n          fill: mountain.color\n        }, `mountain-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n});\n_c2 = MountainBackground;\nexport default MountainBackground;\nvar _c, _c2;\n$RefreshReg$(_c, \"MountainBackground$React.memo\");\n$RefreshReg$(_c2, \"MountainBackground\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","MountainBackground","memo","_c","mountains","color","points","generateMountainPoints","minHeight","maxHeight","peakCount","push","x","y","segmentWidth","i","heightVariation","Math","random","smallBumps","floor","j","bumpX","bumpHeight","sort","a","b","map","p","join","className","style","position","children","viewBox","preserveAspectRatio","id","x1","y1","x2","y2","offset","stopColor","fileName","_jsxFileName","lineNumber","columnNumber","width","height","fill","Array","from","length","_","size","opacity","cx","cy","r","mountain","index","_c2","$RefreshReg$"],"sources":["/Users/sasha/Downloads/Hunter/Spring25/WebDev/03/bank-of-react/src/components/Background.js"],"sourcesContent":["import React from 'react';\nimport './style.css';\n// This component creates a mountain background with a gradient sky and stars\n\nconst MountainBackground = React.memo(() => {\n  // Mountain layers data\n  const mountains = [\n    { color: \"#4d1428\", points: generateMountainPoints(0.85, 0.9, 6) },  // Darkest, back layer\n    { color: \"#672e51\", points: generateMountainPoints(0.75, 0.85, 7) }, // Dark layer\n    { color: \"#ec5558\", points: generateMountainPoints(0.65, 0.8, 8) },  // Red layer\n    { color: \"#fe9481\", points: generateMountainPoints(0.55, 0.75, 10) },// Salmon layer\n    { color: \"#fec493\", points: generateMountainPoints(0.45, 0.7, 12) }  // Coral, front layer\n  ];\n\n  // Function to generate a mountain silhouette\n  function generateMountainPoints(minHeight, maxHeight, peakCount) {\n    const points = [];\n    \n    // Start from the bottom left\n    points.push({ x: 0, y: 1 });\n    \n    // Create mountain peaks\n    const segmentWidth = 1 / (peakCount - 1);\n    \n    for (let i = 0; i < peakCount; i++) {\n      const x = i * segmentWidth;\n      // Randomize the height within the given range\n      const heightVariation = maxHeight - minHeight;\n      const y = minHeight + Math.random() * heightVariation;\n      points.push({ x, y });\n      \n      // Add some small bumps between major peaks\n      if (i < peakCount - 1) {\n        const smallBumps = Math.floor(Math.random() * 2) + 1;\n        for (let j = 0; j < smallBumps; j++) {\n          const bumpX = x + segmentWidth * (j + 1) / (smallBumps + 1);\n          const bumpHeight = y + (Math.random() * 0.05) - 0.03;\n          points.push({ x: bumpX, y: bumpHeight });\n        }\n      }\n    }\n    \n    // End at the bottom right\n    points.push({ x: 1, y: 1 });\n    \n    // Sort points by x to ensure proper drawing\n    points.sort((a, b) => a.x - b.x);\n    \n    return points.map(p => `${p.x * 1000},${p.y * 600}`).join(' ');\n  }\n\n  return (\n    <div className=\"mountain-background\" style={{position: 'absolute', }}>\n        <div className=\"w-full h-full absolute inset-0 -z-10 overflow-hidden bg-gradient-to-b from-pink-900 to-red-900\">\n        <svg\n            viewBox=\"0 0 1000 600\"\n            className=\"w-full h-full\"\n            preserveAspectRatio=\"xMidYMid slice\"\n        >\n            {/* Sky gradient background */}\n            <defs>\n            <linearGradient id=\"skyGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                <stop offset=\"0%\" stopColor=\"#4d1428\" />\n                <stop offset=\"100%\" stopColor=\"#672e51\" />\n            </linearGradient>\n            </defs>\n            <rect x=\"0\" y=\"0\" width=\"1000\" height=\"600\" fill=\"url(#skyGradient)\" />\n            \n            {/* Add some stars in the sky */}\n            {Array.from({ length: 100 }).map((_, i) => {\n            const x = Math.random() * 1000;\n            const y = Math.random() * 350;\n            const size = Math.random() * 2 + 0.5;\n            const opacity = Math.random() * 0.7 + 0.3;\n            return (\n                <circle \n                key={`star-${i}`}\n                cx={x}\n                cy={y}\n                r={size}\n                fill=\"#fec493\"\n                opacity={opacity}\n                />\n            );\n            })}\n            \n            {/* Mountain layers from back to front */}\n            {mountains.map((mountain, index) => (\n            <polygon\n                key={`mountain-${index}`}\n                points={mountain.points}\n                fill={mountain.color}\n            />\n            ))}\n        </svg>\n        </div>\n    </div>\n  );\n  \n});\n\nexport default MountainBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}