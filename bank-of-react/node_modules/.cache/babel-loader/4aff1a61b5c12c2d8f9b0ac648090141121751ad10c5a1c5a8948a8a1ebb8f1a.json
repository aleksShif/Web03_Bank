{"ast":null,"code":"var _jsxFileName = \"/Users/sasha/Downloads/Hunter/Spring25/WebDev/03/bank-of-react/src/components/Background.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LowPolyBackground = () => {\n  // Random triangle generator\n  const generateTriangles = count => {\n    const triangles = [];\n    const width = 1000;\n    const height = 600;\n\n    // Create grid points with slight randomization\n    const gridSize = 80;\n    const rows = Math.ceil(height / gridSize) + 1;\n    const cols = Math.ceil(width / gridSize) + 1;\n    const points = [];\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        const randomX = Math.random() * gridSize * 0.5;\n        const randomY = Math.random() * gridSize * 0.5;\n        points.push({\n          x: x * gridSize + randomX,\n          y: y * gridSize + randomY\n        });\n      }\n    }\n\n    // Calculate center for radial gradient\n    const centerX = width * 0.5;\n    const centerY = height * 0.5;\n\n    // Create triangles from points\n    for (let y = 0; y < rows - 1; y++) {\n      for (let x = 0; x < cols - 1; x++) {\n        const i = y * cols + x;\n\n        // First triangle\n        const p1 = points[i];\n        const p2 = points[i + 1];\n        const p3 = points[i + cols];\n\n        // Calculate color based on distance from center and add randomness\n        const centerDist1 = Math.sqrt(Math.pow(p1.x - centerX, 2) + Math.pow(p1.y - centerY, 2));\n        const brightness1 = Math.max(0, 1 - centerDist1 / (width * 0.7));\n\n        // Add hotspots similar to the image\n        const hotspot1 = {\n          x: width * 0.25,\n          y: height * 0.7\n        };\n        const hotspot2 = {\n          x: width * 0.7,\n          y: height * 0.4\n        };\n        const distToHotspot1 = Math.sqrt(Math.pow(p1.x - hotspot1.x, 2) + Math.pow(p1.y - hotspot1.y, 2));\n        const distToHotspot2 = Math.sqrt(Math.pow(p1.x - hotspot2.x, 2) + Math.pow(p1.y - hotspot2.y, 2));\n        const hotspotsEffect = Math.max(0, 1 - Math.min(distToHotspot1, distToHotspot2) / (width * 0.3)) * 0.6;\n        const totalBrightness = Math.min(1, brightness1 + hotspotsEffect);\n\n        // Corrected colors to match the image better:\n        // Dark burgundy/deep red (#971640) to bright orange (#FFA07A)\n        const r = Math.floor(151 + totalBrightness * 104); // 151 to 255\n        const g = Math.floor(22 + totalBrightness * 138); // 22 to 160\n        const b = Math.floor(64 + totalBrightness * 58); // 64 to 122\n\n        const color = `rgb(${r}, ${g}, ${b})`;\n        triangles.push(/*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: `${p1.x},${p1.y} ${p2.x},${p2.y} ${p3.x},${p3.y}`,\n          fill: color\n        }, `t1-${y}-${x}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this));\n\n        // Second triangle\n        const p4 = points[i + cols + 1];\n\n        // Calculate color for second triangle with slight variation\n        const colorVariation = Math.random() * 12 - 6;\n        const r2 = Math.min(255, Math.max(0, r + colorVariation));\n        const g2 = Math.min(255, Math.max(0, g + colorVariation));\n        const b2 = Math.min(255, Math.max(0, b + colorVariation));\n        const color2 = `rgb(${r2}, ${g2}, ${b2})`;\n        triangles.push(/*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: `${p2.x},${p2.y} ${p3.x},${p3.y} ${p4.x},${p4.y}`,\n          fill: color2\n        }, `t2-${y}-${x}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return triangles;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-full absolute inset-0 -z-10 overflow-hidden\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: \"0 0 1000 600\",\n      className: \"w-full h-full\",\n      preserveAspectRatio: \"xMidYMid slice\",\n      children: generateTriangles(100)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_c = LowPolyBackground;\nexport default LowPolyBackground;\nvar _c;\n$RefreshReg$(_c, \"LowPolyBackground\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","LowPolyBackground","generateTriangles","count","triangles","width","height","gridSize","rows","Math","ceil","cols","points","y","x","randomX","random","randomY","push","centerX","centerY","i","p1","p2","p3","centerDist1","sqrt","pow","brightness1","max","hotspot1","hotspot2","distToHotspot1","distToHotspot2","hotspotsEffect","min","totalBrightness","r","floor","g","b","color","fill","fileName","_jsxFileName","lineNumber","columnNumber","p4","colorVariation","r2","g2","b2","color2","className","children","viewBox","preserveAspectRatio","_c","$RefreshReg$"],"sources":["/Users/sasha/Downloads/Hunter/Spring25/WebDev/03/bank-of-react/src/components/Background.js"],"sourcesContent":["import React from 'react';\n\nconst LowPolyBackground = () => {\n  // Random triangle generator\n  const generateTriangles = (count) => {\n    const triangles = [];\n    const width = 1000;\n    const height = 600;\n    \n    // Create grid points with slight randomization\n    const gridSize = 80;\n    const rows = Math.ceil(height / gridSize) + 1;\n    const cols = Math.ceil(width / gridSize) + 1;\n    const points = [];\n    \n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        const randomX = Math.random() * gridSize * 0.5;\n        const randomY = Math.random() * gridSize * 0.5;\n        points.push({\n          x: x * gridSize + randomX,\n          y: y * gridSize + randomY\n        });\n      }\n    }\n    \n    // Calculate center for radial gradient\n    const centerX = width * 0.5;\n    const centerY = height * 0.5;\n    \n    // Create triangles from points\n    for (let y = 0; y < rows - 1; y++) {\n      for (let x = 0; x < cols - 1; x++) {\n        const i = y * cols + x;\n        \n        // First triangle\n        const p1 = points[i];\n        const p2 = points[i + 1];\n        const p3 = points[i + cols];\n        \n        // Calculate color based on distance from center and add randomness\n        const centerDist1 = Math.sqrt(Math.pow(p1.x - centerX, 2) + Math.pow(p1.y - centerY, 2));\n        const brightness1 = Math.max(0, 1 - centerDist1 / (width * 0.7));\n        \n        // Add hotspots similar to the image\n        const hotspot1 = {x: width * 0.25, y: height * 0.7};\n        const hotspot2 = {x: width * 0.7, y: height * 0.4};\n        \n        const distToHotspot1 = Math.sqrt(Math.pow(p1.x - hotspot1.x, 2) + Math.pow(p1.y - hotspot1.y, 2));\n        const distToHotspot2 = Math.sqrt(Math.pow(p1.x - hotspot2.x, 2) + Math.pow(p1.y - hotspot2.y, 2));\n        \n        const hotspotsEffect = Math.max(\n          0, \n          1 - Math.min(distToHotspot1, distToHotspot2) / (width * 0.3)\n        ) * 0.6;\n        \n        const totalBrightness = Math.min(1, brightness1 + hotspotsEffect);\n        \n        // Corrected colors to match the image better:\n        // Dark burgundy/deep red (#971640) to bright orange (#FFA07A)\n        const r = Math.floor(151 + totalBrightness * 104); // 151 to 255\n        const g = Math.floor(22 + totalBrightness * 138);  // 22 to 160\n        const b = Math.floor(64 + totalBrightness * 58);   // 64 to 122\n        \n        const color = `rgb(${r}, ${g}, ${b})`;\n        \n        triangles.push(\n          <polygon \n            key={`t1-${y}-${x}`}\n            points={`${p1.x},${p1.y} ${p2.x},${p2.y} ${p3.x},${p3.y}`}\n            fill={color}\n          />\n        );\n        \n        // Second triangle\n        const p4 = points[i + cols + 1];\n        \n        // Calculate color for second triangle with slight variation\n        const colorVariation = Math.random() * 12 - 6;\n        const r2 = Math.min(255, Math.max(0, r + colorVariation));\n        const g2 = Math.min(255, Math.max(0, g + colorVariation));\n        const b2 = Math.min(255, Math.max(0, b + colorVariation));\n        \n        const color2 = `rgb(${r2}, ${g2}, ${b2})`;\n        \n        triangles.push(\n          <polygon \n            key={`t2-${y}-${x}`}\n            points={`${p2.x},${p2.y} ${p3.x},${p3.y} ${p4.x},${p4.y}`}\n            fill={color2}\n          />\n        );\n      }\n    }\n    \n    return triangles;\n  };\n\n  return (\n    <div className=\"w-full h-full absolute inset-0 -z-10 overflow-hidden\">\n      <svg\n        viewBox=\"0 0 1000 600\"\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"xMidYMid slice\"\n      >\n        {generateTriangles(100)}\n      </svg>\n    </div>\n  );\n};\n\nexport default LowPolyBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}